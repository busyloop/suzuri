{"repository_name":"suzuri","body":"# Suzuri\n[![Build](https://github.com/busyloop/suzuri/workflows/Build/badge.svg)](https://github.com/busyloop/suzuri/actions?query=workflow%3ABuild+branch%3Amaster) [![GitHub](https://img.shields.io/github/license/busyloop/suzuri)](https://en.wikipedia.org/wiki/MIT_License) [![GitHub release](https://img.shields.io/github/release/busyloop/suzuri.svg)](https://github.com/busyloop/suzuri/releases)\n\nSuzuri is a secure and easy to use token format that employs  \n[XChaCha20-Poly1305 AEAD](https://doc.libsodium.org/secret-key_cryptography/aead/chacha20-poly1305/xchacha20-poly1305_construction) symmetric encryption to create  \nauthenticated, encrypted, tamperproof tokens.  \n\nIt compresses and encrypts an arbitrary sequence of bytes,  \nthen encodes the result to url-safe Base64.\n\nSuzuri tokens can be used as a secure alternative to JWT  \nor for any type of general purpose message passing.\n\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     suzuri:\n       github: busyloop/suzuri\n   ```\n\n2. Run `shards install`\n\n## Documentation\n\n* [API Documentation](https://busyloop.github.io/suzuri/Suzuri.html)\n\n\n## Usage\n\n```crystal\nrequire \"suzuri\"\n\nTEST_KEY = \"TheKeyLengthMustBeThirtyTwoBytes\"\n\n## Encode\ntoken_str = Suzuri.encode(\"hello world\", TEST_KEY) # => \"(url-safe base64)\"\n\n## Decode\ntoken = Suzuri.decode(token_str, TEST_KEY)   # => Suzuri::Token\ntoken.to_s                                   # => \"hello world\"\ntoken.timestamp                              # => 2020-01-01 01:23:45.0 UTC\n\n## Decode with a TTL constraint\ntoken_str = Suzuri.encode(\"hello world\", TEST_KEY) # => \"(url-safe base64)\"\nsleep 5\nSuzuri.decode(token_str, TEST_KEY, 2.seconds) # => Suzuri::Error::TokenExpired\n```\n\n## Usage (with [JSON::Serializable](https://crystal-lang.org/api/0.34.0/JSON/Serializable.html))\n\n```crystal\nrequire \"suzuri/json_serializable\"\n\nTEST_KEY = \"TheKeyLengthMustBeThirtyTwoBytes\"\n\nclass Person\n   include JSON::Serializable\n\n   @[JSON::Field]\n   property name : String\n\n   def initialize(@name)\n   end\nend\n\nbob = Person.new(name: \"bob\")\ntoken_str = bob.to_suzuri(TEST_KEY)\n\nbob2 = Person.from_suzuri(token_str, TEST_KEY)\nbob2.name # => \"bob\"\n```\n\n\n## Compression\n\nBy default Suzuri applies zstd compression before encryption when the  \npayload is larger than 512 bytes. The compression threshold and level  \ncan be chosen at runtime.\n\n\n## Contributing\n\n1. Fork it (<https://github.com/busyloop/suzuri/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Credits\n\nSuzuri is inspired by (but not compatible to) [Branca](https://github.com/tuupola/branca-spec/)-tokens. The underlying encryption is identical.  \nSuzuri adds compression support and serializes to url-safe Base64 instead of Base62.\n\n","program":{"html_id":"suzuri/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"suzuri","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"suzuri/JSON","path":"JSON.html","kind":"module","full_name":"JSON","name":"JSON","abstract":false,"locations":[{"filename":"src/suzuri/json_serializable.cr","line_number":39,"url":null}],"repository_name":"suzuri","program":false,"enum":false,"alias":false,"const":false,"types":[{"html_id":"suzuri/JSON/Serializable","path":"JSON/Serializable.html","kind":"module","full_name":"JSON::Serializable","name":"Serializable","abstract":false,"locations":[{"filename":"src/suzuri/json_serializable.cr","line_number":39,"url":null}],"repository_name":"suzuri","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"suzuri/JSON","kind":"module","full_name":"JSON","name":"JSON"},"doc":"Use `require \"suzuri/json_serializable\"` to add\n`#to_suzuri`, `#from_suzuri` and `#from_suzuri_with_timestamp`\nmethods to all `JSON::Serializable` objects.\n\n**Example usage:**\n\n```\nrequire \"suzuri/json_serializable\"\n\nclass Person\n  include JSON::Serializable\n\n  @[JSON::Field(key: \"name\")]\n  property name : String\n\n  def initialize(@name)\n  end\nend\n\nbob = Person.new(name: \"bob\")\ntoken = bob.to_suzuri(KEY)\n\ndecoded = Person.from_suzuri(token, KEY)\ndecoded.name # => \"bob\"\n\n# Decode with ttl constraint\ndecoded = Person.from_suzuri(token, KEY, 5.seconds)\n\n# Decode with timestamp\ndecoded, timestamp = Person.from_suzuri_with_timestamp(token, KEY)\ndecoded.name # => \"bob\"\ntimestamp    # => Time\n\n# Decode with timestamp and ttl constraint\ndecoded, timestamp = Person.from_suzuri_with_timestamp(token, KEY, 5.seconds)\n```","summary":"<p>Use <code>require &quot;suzuri/json_serializable&quot;</code> to add <code>#to_suzuri</code>, <code>#from_suzuri</code> and <code>#from_suzuri_with_timestamp</code> methods to all <code><a href=\"../JSON/Serializable.html\">JSON::Serializable</a></code> objects.</p>"}]},{"html_id":"suzuri/Suzuri","path":"Suzuri.html","kind":"module","full_name":"Suzuri","name":"Suzuri","abstract":false,"locations":[{"filename":"src/suzuri.cr","line_number":5,"url":null}],"repository_name":"suzuri","program":false,"enum":false,"alias":false,"const":false,"class_methods":[{"html_id":"decode(token:String,key:String|Bytes,ttl:Time::Span?=nil):Token-class-method","name":"decode","doc":"Decodes a Suzuri token.\n\n**Examples:**\n```\n# Decode\nSuzuri.decode(token, KEY) # => Suzuri::Token\n\n# Decode with a ttl constraint\nSuzuri.decode(token, KEY, 5.minutes) # => Suzuri::Error::TokenExpired\n```","summary":"<p>Decodes a Suzuri token.</p>","abstract":false,"args":[{"name":"token","external_name":"token","restriction":"String"},{"name":"key","external_name":"key","restriction":"String | Bytes"},{"name":"ttl","default_value":"nil","external_name":"ttl","restriction":"Time::Span | ::Nil"}],"args_string":"(token : String, key : String | Bytes, ttl : Time::Span? = nil) : Token","args_html":"(token : String, key : String | Bytes, ttl : Time::Span? = <span class=\"n\">nil</span>) : <a href=\"Suzuri/Token.html\">Token</a>","location":{"filename":"src/suzuri.cr","line_number":59,"url":null},"def":{"name":"decode","args":[{"name":"token","external_name":"token","restriction":"String"},{"name":"key","external_name":"key","restriction":"String | Bytes"},{"name":"ttl","default_value":"nil","external_name":"ttl","restriction":"Time::Span | ::Nil"}],"return_type":"Token","visibility":"Public","body":"begin\n  raw = Base64.decode(token)\nrescue ex : Exception\n  raise(Error::MalformedInput.new(\"Base64 decoding failed\"))\nend\nbegin\n  timestamp = Time.unix((IO::Memory.new(raw[1..4])).read_bytes(UInt32, IO::ByteFormat::BigEndian))\n  header = raw[0..(Token::HEADER_SIZE - 1)]\n  ciphertext = raw[Token::HEADER_SIZE..-1]\n  nonce = Sodium::Nonce.new(raw[5..(4 + Token::NONCE_SIZE)])\nrescue ex : Exception\n  raise(Error::MalformedInput.new(ex.message))\nend\nbegin\n  cipher = Token::CIPHER.new(Sodium::SecureBuffer.copy_from(key.to_slice))\n  payload = cipher.decrypt(ciphertext, nonce: nonce, additional: header.to_slice)\n  if raw[0] == 129_u8\n    dctx = Zstd::Decompress::Context.new\n    payload = dctx.decompress(payload)\n  end\nrescue ex : Sodium::Error::DecryptionFailed\n  raise(Error::DecryptionFailed.new(ex.message))\nend\nif ttl && (timestamp + ttl) < Time.utc\n  raise(Error::TokenExpired.new(\"Token expired at #{timestamp + ttl}\"))\nend\nToken.new(payload: payload, timestamp: timestamp)\n"}},{"html_id":"encode(payload:String|Bytes,key:String|Bytes,timestamp:Time=Time.utc,compress_level=3,compress_threshold:UInt64=512):String-class-method","name":"encode","doc":"Encodes a Suzuri token.\n\n**Examples:**\n```\n# Encode\nSuzuri.encode(\"hello world\", KEY) # => \"wB3AKYBaTwJc...\"\n\n# Encode with compression disabled\nSuzuri.encode(\"hello world\", KEY, compress_threshold: UInt64::MAX) # => \"xAJyiEKfPLPi...\"\n\n# Encode with a custom creation timestamp\nSuzuri.encode(\"hello world\", KEY, Time.utc(1985-10-26)) # => \"mArTYmcfLyYy...\"\n\n# Encode with a higher compression level. Value can be 1-19. Default is 3.\nSuzuri.encode(\"hello world\", KEY, compress_level: 10) # => \"puI8lSpoAox5...\"\n```","summary":"<p>Encodes a Suzuri token.</p>","abstract":false,"args":[{"name":"payload","external_name":"payload","restriction":"String | Bytes"},{"name":"key","external_name":"key","restriction":"String | Bytes"},{"name":"timestamp","default_value":"Time.utc","external_name":"timestamp","restriction":"Time"},{"name":"compress_level","default_value":"3","external_name":"compress_level","restriction":""},{"name":"compress_threshold","default_value":"512","external_name":"compress_threshold","restriction":"UInt64"}],"args_string":"(payload : String | Bytes, key : String | Bytes, timestamp : Time = Time.utc, compress_level = 3, compress_threshold : UInt64 = 512) : String","args_html":"(payload : String | Bytes, key : String | Bytes, timestamp : Time = <span class=\"t\">Time</span>.utc, compress_level = <span class=\"n\">3</span>, compress_threshold : UInt64 = <span class=\"n\">512</span>) : String","location":{"filename":"src/suzuri.cr","line_number":22,"url":null},"def":{"name":"encode","args":[{"name":"payload","external_name":"payload","restriction":"String | Bytes"},{"name":"key","external_name":"key","restriction":"String | Bytes"},{"name":"timestamp","default_value":"Time.utc","external_name":"timestamp","restriction":"Time"},{"name":"compress_level","default_value":"3","external_name":"compress_level","restriction":""},{"name":"compress_threshold","default_value":"512","external_name":"compress_threshold","restriction":"UInt64"}],"return_type":"String","visibility":"Public","body":"cipher = Token::CIPHER.new(Sodium::SecureBuffer.copy_from(key.to_slice))\nnonce = Sodium::Nonce.random\nheader = IO::Memory.new(Token::HEADER_SIZE)\nheader.write_byte(payload.size > compress_threshold ? 129_u8 : 128_u8)\nheader.write_bytes(timestamp.to_unix.to_u32, IO::ByteFormat::BigEndian)\nheader.write(nonce.to_slice)\nif payload.size > compress_threshold\n  cctx = Zstd::Compress::Context.new(level: compress_level)\n  payload = cctx.compress(payload.to_slice)\nend\nciphertext, _ = cipher.encrypt(payload, nonce: nonce, additional: header.to_slice)\nraw = Bytes.new(header.size + ciphertext.size)\nheader.to_slice.move_to(raw)\nciphertext.move_to(raw + header.size)\nBase64.urlsafe_encode(raw.to_slice)\n"}}],"types":[{"html_id":"suzuri/Suzuri/Error","path":"Suzuri/Error.html","kind":"module","full_name":"Suzuri::Error","name":"Error","abstract":false,"locations":[{"filename":"src/suzuri.cr","line_number":90,"url":null}],"repository_name":"suzuri","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"suzuri/Suzuri","kind":"module","full_name":"Suzuri","name":"Suzuri"},"types":[{"html_id":"suzuri/Suzuri/Error/DecodeError","path":"Suzuri/Error/DecodeError.html","kind":"class","full_name":"Suzuri::Error::DecodeError","name":"DecodeError","abstract":false,"superclass":{"html_id":"suzuri/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"suzuri/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"suzuri/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"suzuri/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/suzuri.cr","line_number":91,"url":null}],"repository_name":"suzuri","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"suzuri/Suzuri/Error/DecryptionFailed","kind":"class","full_name":"Suzuri::Error::DecryptionFailed","name":"DecryptionFailed"},{"html_id":"suzuri/Suzuri/Error/MalformedInput","kind":"class","full_name":"Suzuri::Error::MalformedInput","name":"MalformedInput"},{"html_id":"suzuri/Suzuri/Error/TokenExpired","kind":"class","full_name":"Suzuri::Error::TokenExpired","name":"TokenExpired"}],"namespace":{"html_id":"suzuri/Suzuri/Error","kind":"module","full_name":"Suzuri::Error","name":"Error"}},{"html_id":"suzuri/Suzuri/Error/DecryptionFailed","path":"Suzuri/Error/DecryptionFailed.html","kind":"class","full_name":"Suzuri::Error::DecryptionFailed","name":"DecryptionFailed","abstract":false,"superclass":{"html_id":"suzuri/Suzuri/Error/DecodeError","kind":"class","full_name":"Suzuri::Error::DecodeError","name":"DecodeError"},"ancestors":[{"html_id":"suzuri/Suzuri/Error/DecodeError","kind":"class","full_name":"Suzuri::Error::DecodeError","name":"DecodeError"},{"html_id":"suzuri/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"suzuri/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"suzuri/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/suzuri.cr","line_number":94,"url":null}],"repository_name":"suzuri","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"suzuri/Suzuri/Error","kind":"module","full_name":"Suzuri::Error","name":"Error"}},{"html_id":"suzuri/Suzuri/Error/MalformedInput","path":"Suzuri/Error/MalformedInput.html","kind":"class","full_name":"Suzuri::Error::MalformedInput","name":"MalformedInput","abstract":false,"superclass":{"html_id":"suzuri/Suzuri/Error/DecodeError","kind":"class","full_name":"Suzuri::Error::DecodeError","name":"DecodeError"},"ancestors":[{"html_id":"suzuri/Suzuri/Error/DecodeError","kind":"class","full_name":"Suzuri::Error::DecodeError","name":"DecodeError"},{"html_id":"suzuri/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"suzuri/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"suzuri/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/suzuri.cr","line_number":92,"url":null}],"repository_name":"suzuri","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"suzuri/Suzuri/Error","kind":"module","full_name":"Suzuri::Error","name":"Error"}},{"html_id":"suzuri/Suzuri/Error/TokenExpired","path":"Suzuri/Error/TokenExpired.html","kind":"class","full_name":"Suzuri::Error::TokenExpired","name":"TokenExpired","abstract":false,"superclass":{"html_id":"suzuri/Suzuri/Error/DecodeError","kind":"class","full_name":"Suzuri::Error::DecodeError","name":"DecodeError"},"ancestors":[{"html_id":"suzuri/Suzuri/Error/DecodeError","kind":"class","full_name":"Suzuri::Error::DecodeError","name":"DecodeError"},{"html_id":"suzuri/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"suzuri/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"suzuri/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/suzuri.cr","line_number":93,"url":null}],"repository_name":"suzuri","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"suzuri/Suzuri/Error","kind":"module","full_name":"Suzuri::Error","name":"Error"}}]},{"html_id":"suzuri/Suzuri/Token","path":"Suzuri/Token.html","kind":"struct","full_name":"Suzuri::Token","name":"Token","abstract":false,"superclass":{"html_id":"suzuri/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"suzuri/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"suzuri/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"suzuri/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/suzuri.cr","line_number":97,"url":null}],"repository_name":"suzuri","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"suzuri/Suzuri","kind":"module","full_name":"Suzuri","name":"Suzuri"},"instance_methods":[{"html_id":"payload:Bytes-instance-method","name":"payload","doc":"Returns the decrypted payload as `Bytes`","summary":"<p>Returns the decrypted payload as <code>Bytes</code></p>","abstract":false,"location":{"filename":"src/suzuri.cr","line_number":109,"url":null},"def":{"name":"payload","return_type":"Bytes","visibility":"Public","body":"@payload"}},{"html_id":"timestamp:Time-instance-method","name":"timestamp","doc":"Returns the creation timestamp","summary":"<p>Returns the creation timestamp</p>","abstract":false,"location":{"filename":"src/suzuri.cr","line_number":106,"url":null},"def":{"name":"timestamp","return_type":"Time","visibility":"Public","body":"@timestamp"}},{"html_id":"to_s:String-instance-method","name":"to_s","doc":"Returns the decrypted payload as `String`","summary":"<p>Returns the decrypted payload as <code>String</code></p>","abstract":false,"location":{"filename":"src/suzuri.cr","line_number":112,"url":null},"def":{"name":"to_s","return_type":"String","visibility":"Public","body":"String.new(@payload)"}}]}]}]}}